// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Pay.Service.StoreRequest.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LykkePayServiceStoreRequestMicroService.
    /// </summary>
    public static partial class LykkePayServiceStoreRequestMicroServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiStoreGet(this ILykkePayServiceStoreRequestMicroService operations)
            {
                operations.ApiStoreGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStoreGetAsync(this ILykkePayServiceStoreRequestMicroService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStoreGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static void ApiStorePost(this ILykkePayServiceStoreRequestMicroService operations, PayRequest request = default(PayRequest))
            {
                operations.ApiStorePostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStorePostAsync(this ILykkePayServiceStoreRequestMicroService operations, PayRequest request = default(PayRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStorePostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static void ApiStoreByMerchantIdGet(this ILykkePayServiceStoreRequestMicroService operations, string merchantId)
            {
                operations.ApiStoreByMerchantIdGetAsync(merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStoreByMerchantIdGetAsync(this ILykkePayServiceStoreRequestMicroService operations, string merchantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStoreByMerchantIdGetWithHttpMessagesAsync(merchantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiStoreOrderGet(this ILykkePayServiceStoreRequestMicroService operations)
            {
                operations.ApiStoreOrderGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStoreOrderGetAsync(this ILykkePayServiceStoreRequestMicroService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStoreOrderGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static void ApiStoreOrderPost(this ILykkePayServiceStoreRequestMicroService operations, OrderRequest request = default(OrderRequest))
            {
                operations.ApiStoreOrderPostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStoreOrderPostAsync(this ILykkePayServiceStoreRequestMicroService operations, OrderRequest request = default(OrderRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStoreOrderPostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static void ApiStoreOrderByMerchantIdGet(this ILykkePayServiceStoreRequestMicroService operations, string merchantId)
            {
                operations.ApiStoreOrderByMerchantIdGetAsync(merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiStoreOrderByMerchantIdGetAsync(this ILykkePayServiceStoreRequestMicroService operations, string merchantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiStoreOrderByMerchantIdGetWithHttpMessagesAsync(merchantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
